name: build
on: [ push ]
jobs:
  build:
    strategy:
      matrix:
        label: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - label: ubuntu-latest
            script: chmod +x ./package/package.sh && ./package/package.sh linux
            artifact: branch-dashboard-linux
          - label: macos-latest
            script: chmod +x ./package/package.sh && ./package/package.sh macos
            artifact: branch-dashboard-macos
          - label: windows-latest
            script: .\package\package.ps1
            artifact: branch-dashboard-windows
    runs-on: [ '${{ matrix.label }}' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - uses: dtolnay/rust-toolchain@stable
      - name: Lint UI
        if: ${{ matrix.label == 'ubuntu-latest' }}
        run: |
          npm ci --omit=optional
          npm run lint
        working-directory: ./ui
      - name: Build UI
        run: |
          npm ci --omit=optional
          npm run build
        working-directory: ./ui
      - name: Check formatting of server
        run: |
          rustup component add rustfmt
          cargo fmt --quiet -- --check
        working-directory: ./server
      - name: Test server
        run: cargo test
        working-directory: ./server
      - name: Lint server
        run: |
          rustup component add clippy
          cargo clippy -- -D warnings
        working-directory: ./server
      - name: Build server
        run: cargo build --release
        working-directory: ./server
      - name: Package
        run: ${{ matrix.script }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: target/
      - uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'
      - name: Log in to Docker Hub
        if: ${{ matrix.label == 'ubuntu-latest' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: docker/login-action@v2
        with:
          username: mariokaufmann
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Copy artifacts for docker build
        if: ${{ matrix.label == 'ubuntu-latest' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
        run: chmod +x ./package/docker.sh && ./package/docker.sh
      - name: Build and push Docker image (untagged)
        if: ${{ matrix.label == 'ubuntu-latest' && github.ref == 'refs/heads/main' && steps.version.outputs.is_valid == 'false' }}
        uses: docker/build-push-action@v3
        with:
          context: docker
          push: true
          tags: mariokaufmann/branch-dashboard:latest
      - name: Build and push Docker image (tagged)
        if: ${{ matrix.label == 'ubuntu-latest' && steps.version.outputs.is_valid == 'true' }}
        uses: docker/build-push-action@v3
        with:
          context: docker
          push: true
          tags: mariokaufmann/branch-dashboard:latest,mariokaufmann/branch-dashboard:${{ steps.version.outputs.full_without_prefix }}
  release:
    runs-on: [ ubuntu-latest ]
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    steps:
    # https://github.com/actions/download-artifact/issues/143
      - name: Download artifacts
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            for (const artifact of allArtifacts.data.artifacts)
            {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: artifact.id,
                 archive_format: 'zip',
              });
            
               let fs = require('fs');
               fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/release/${artifact.name}.zip`, Buffer.from(download.data));
            }
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
